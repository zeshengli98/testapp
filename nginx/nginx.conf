#user  vcm;
worker_processes  1;

error_log  logs\error.log;
#error_log  logs\error.log  notice;
#error_log  logs\error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    ###### IMPORTANT! ### IMPORTANT! ### IMPORTANT! ### IMPORTANT! ### IMPORTANT! ### IMPORTANT! ######
    ### You'll need to update the lines marked "# <== CHANGE" for your own names, info, paths, etc. ###
    ###################################################################################################

    # HTTPS server
    server {
        listen       443 ssl;
        # listen 80;
        # listen [::]:80;
        server_name  fintech-test.co;

        ssl_certificate      C:\Certbot\live\fintech-test.co\fullchain.pem; # <== CHANGE ###############################
        ssl_certificate_key  C:\Certbot\live\fintech-test.co\privkey.pem;   # <== CHANGE ###############################

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        location / {
            # This location defines the main server -- what you see when someone navigates to your URL. It does three
            #   basic things:
            #     1) Directs nginx to use basic authentication, with a simple name (like "Trading App Login")
            #     2) Tells nginx where to find the htpasswd user file, which contains the (encrypted) user name &
            #        password pairs that allow access to your app
            #     3) Defines 'proxy_pass' for localhost on the port your app is being served on. In other words,
            #        the 'proxy_pass' line is saying: "once a user is authenticated, just give them access to the
            #        Dash app that is being served by Waitress"
            #
            # You MAY alter these lines if needed, but not much reason to

            auth_basic "Trading App Login";
            auth_basic_user_file C:\Users\vcm\Desktop\.htpasswd;
            proxy_pass http://127.0.0.1:3000;

        }

        location = /hooks {

            # This is the location used ONLY by the webhook. Anyone navigating to this site should get a NOT ALLOWED
            #   error (405) from the browser... EXCEPT for a GitHub payload that was triggered by the webhook you
            #   configured and directed to fire whenever you or a collaborator made PUSH to the app repo's main branch.

            # Turn off authentication and define client body & buffer size for the payload
            auth_basic off;
            allow all;
            client_body_buffer_size 3M;
            client_max_body_size  3M;

            # This is the main script, written in Lua, that runs whenever anyone (or anybot) navigates to the /hooks
            # sub-page of your app.
            content_by_lua_block {

                -- # When you set up your webhook you defined a secret to be used for authentication. That secret should
                -- # be stored as a system environmental variable on your server. For this app, I named the secret
                -- # "TESTAPP_GIT_SECRET" and I retrieve its value with os.getenv() as below. You'll want to give your
                -- #  secret a different, but similarly informative name
                local key = os.getenv("TESTAPP_GIT_SECRET") -- # <== CHANGE ############################################

                local branch = "refs/heads/main" -- # <== MAYBE CHANGE -- only if the branch that you're using for your
                                                 -- #     main production app is anything other than 'main'.

                local cjson = require "cjson"    -- # need the cjson module to parse json

                -- # Set the nginx.header content type to readable characters
                ngx.header.content_type = "text/plain; charset=utf-8"

                local function validate_hook()
                -- # runs every time anything navigates to the /hooks page.
                -- # validate_hook reads the request made to the /hooks page and processes it to determine if it's a
                -- # genuine GitHub payload sent from the correct repository.
                -- #   - if it is a genuine payload sent from the right repo, then this function exits with ngx.eof(),
                -- #     which sends an http OK (200) response to GitHub and exits the function (but not the lua block)
                -- #     with the return value "1".
                -- #   - Otherwise, the function sends an appropriate response (NOT ALLOWED, BAD REQUEST, etc) and
                -- #     control returns to nginx outside of the content_by_lua block.

                    if ngx.req.get_method() ~= "POST" then
                        ngx.log(ngx.ERR, "wrong event request method: ", ngx.req.get_method())
                        return ngx.exit (ngx.HTTP_NOT_ALLOWED)
                    end

                    local headers = ngx.req.get_headers()

                    if headers['X-GitHub-Event'] ~= "push" then
                        ngx.log(ngx.ERR, "wrong event type: ", headers['X-GitHub-Event'])
                        return ngx.exit (ngx.HTTP_NOT_ACCEPTABLE)
                    end

                    if headers['Content-Type'] ~= 'application/json' then
                        ngx.log(ngx.ERR, "wrong content type header: ", headers['Content-Type'])
                        return ngx.exit (ngx.HTTP_NOT_ACCEPTABLE)
                    end

                    ngx.req.read_body()
                    local data = ngx.req.get_body_data()

                    if not data then
                        ngx.log(ngx.ERR, "failed to get request body")
                        return ngx.exit (ngx.HTTP_BAD_REQUEST)
                    end

                    -- # Here, TESTAPP_GIT_SECRET is used as a key to calculate the hmac sha1 digest of the entire
                    -- # message sent from Git (i.e., data)
                    local digest = ngx.hmac_sha1(key, data)

                    -- # The digest comes out as a binary string, but Git reports it as a hex string, so need a function
                    -- # to convert binary to hex:
                    local function bin_string_to_hex (str)
                        local len = string.len(str)
                        local dump = ""
                        local hex = ""

                        for i = 1, len do

                            local ord = string.byte( str, i )
                            hex = hex .. string.format( "%02x", ord )

                        end

                        return dump .. hex

                    end

                    -- # Use bin_string_to_hex() on the digest, and add a "sha1=" prefix to match Git's formatting
                    local digest_hex_str = "sha1=" .. bin_string_to_hex(digest)

                    -- # If the calculated digest doesn't match the one provided by Git in the payload itself, then it's
                    -- # not a genuine payload and the function exits early.
                    if headers["X-Hub-Signature"] ~= digest_hex_str then
                        ngx.log(ngx.ERR, "wrong webhook signature")
                        return ngx.exit (ngx.HTTP_FORBIDDEN)
                    end

                    -- # Also exit early if the payload is genuine, but for a branch other than the one defined in the
                    -- # "branch" variable above.
                    data = cjson.decode(data)
                    if data["ref"] ~= branch then
                        ngx.say("Skip branch ", data["ref"])
                        return ngx.exit (ngx.HTTP_OK)
                    end

                    -- # If a request has made it here, it's the real deal. Exit the function, send a response to GitHub
                    -- # to satisfy its 10-second response timeout time, and return the value "1."
                    return ngx.eof()

                end

                if validate_hook() == 1 then
                -- # If you're in this loop, then a genuine update from Git has been received. Time to:

                    -- # 1) Tell the server to restart the serve_testapp NSSM service, which refreshes the local app
                    -- #    repo via git pull and re-serves the app via Waitress.
                    -- # 2) Wait for 1) to execute, and read the response into "output"
                    -- # 3) Close the connection to the command line
                    -- # 4) Log the output
                    local handle = io.popen("nssm restart serve_testapp")
                    local output = handle:read("*all")
                    handle:close()
                    ngx.log(ngx.ERR, output)

                    -- # All set! exit the lua content block and return to nginx with status = HTTP_OK.
                    return ngx.exit (ngx.HTTP_OK)

                end

            }

        }

    }

}
